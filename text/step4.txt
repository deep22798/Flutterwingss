Flutter uses plugins to provide access to a wide range of platform-specific services, such as Firebase APIs. Plugins include platform-specific code to access services and APIs on each platform.

Firebase is accessed through a number of different libraries, one for each Firebase product (for example: Realtime Database, Authentication, Analytics, or Cloud Storage). Flutter provides a set of Firebase plugins, which are collectively called FlutterFire.

Since Flutter is a multi-platform SDK, each FlutterFire plugin is applicable for both iOS and Android. So, if you add any FlutterFire plugin to your Flutter app, it will be used by both the iOS and Android versions of your Firebase app.

Be sure to check the FlutterFire docs for the most up-to-date list of FlutterFire plugins.

Note: The steps in this section are an example of how to add Flutter-supported Firebase products) to your Flutter-Firebase app (both the iOS and Android versions).

   • Ensure that your app is not currently running in your emulator or on your device.

   • From the root directory of your Flutter app, open your pubspec.yaml file.

   • Add the FlutterFire plugin for the Firebase Core Flutter SDK.

Note: All Flutter-Firebase apps, both iOS and Android versions, require the firebase_core plugin for Flutter.

dependencies:
  flutter:
    sdk: flutter
  # Add the dependency for the Firebase Core Flutter SDK
  firebase_core: ^0.4.0+9

   • Add the FlutterFire plugins for the Firebase products that you want to use in your app.

Analytics enabled
Analytics not enabled

dependencies:
  flutter:
    sdk: flutter
  # Check that you have this dependency (added in the previous step)
  firebase_core: ^0.4.0+9

  # Add the dependency for the FlutterFire plugin for Google Analytics
  firebase_analytics: ^5.0.2

  # Add the dependencies for any other Firebase products you want to use in your app
  # For example, to use Firebase Authentication and Cloud Firestore
  firebase_auth: ^0.14.0+5
  cloud_firestore: ^0.12.9+5

   • Run flutter packages get.
     For more information about managing packages and plugins, refer to Using Packages.

   • If you added Analytics, run your app to send verification to Firebase that you've successfully integrated Firebase. Otherwise, you can skip the verification step.

You’re all set! Your Flutter app is registered and configured to use Firebase.

   Try out an example app with Analytics

Like all packages, the firebase_analytics plugin comes with an example program.

   • Open a Flutter app that you've already configured to use Firebase (see instructions on this page).

   • Access the lib directory of the app, then delete the existing main.dart file.

   • From the Google Analytics example program repository, copy-paste the following two files into your app's lib directory:

     main.dart
     tabs_page.dart
     Run your Flutter app.

   • Go to your app's Firebase project in the Firebase console, then click Analytics in the left-nav.

   • Click Dashboard. If Analytics is working properly, the dashboard shows an active user in the "Users active in the last 30 minutes" panel (this might take time to populate this panel).

   • Click DebugView. Enable the feature to see all the events generated by the example program.

For more information about setting up Analytics, visit the getting started guides for :